#DPATCHLEVEL=0
# Revert broken upstream changes and apply missing parts from my patch
--- src/libxosd/xosd.c
+++ src/libxosd/xosd.c
@@ -143,9 +143,6 @@
 
   DEBUG(Dvalue, "percent=%d, nbars=%d, on=%d", l->value, nbars, on);
 
-  /* adjust the y coordinate based on the line number */
-  p.y += line*osd->line_height;
-
   /* Outline */
   if (osd->outline_offset) {
     m.x = m.y = -osd->outline_offset;
@@ -210,9 +207,6 @@
     break;
   }
 
-  /* adjust the y coordinate based on the line number */
-  y += line*osd->line_height;
-
   if (osd->shadow_offset) {
     XSetForeground(osd->display, osd->gc, osd->shadow_pixel);
     _draw_text(osd, l->string, x + osd->shadow_offset,
@@ -309,14 +303,14 @@
       DEBUG(Dupdate, "UPD_lines");
       for (line = 0; line < osd->number_lines; line++) {
         int y = osd->line_height * line;
-#if 0                           /* Turn on for debugging */
+#ifdef DEBUG_XSHAPE
         XSetForeground(osd->display, osd->gc, osd->outline_pixel);
         XFillRectangle(osd->display, osd->line_bitmap, osd->gc, 0,
-                       y, osd->screen_width, osd->line_height);
+                       0, osd->screen_width, osd->line_height);
 #endif
         if (osd->update & UPD_mask) {
           XFillRectangle(osd->display, osd->mask_bitmap, osd->mask_gc_back, 0,
-                         y, osd->screen_width, osd->line_height);
+                         0, osd->screen_width, osd->line_height);
         }
         switch (osd->lines[line].type) {
         case LINE_text:
@@ -328,16 +322,22 @@
         case LINE_blank:
           break;
         }
-#if 1                           /* Turn off for debugging */
+#ifndef DEBUG_XSHAPE
         /* More than colours was changed, update XShape. */
         if (osd->update & UPD_mask) {
           DEBUG(Dupdate, "UPD_mask");
-          XShapeCombineMask(osd->display, osd->window, ShapeBounding, 0, 0,
-                            osd->mask_bitmap, ShapeSet);
+          XShapeCombineMask(osd->display, osd->window, ShapeBounding, 0, y,
+                            osd->mask_bitmap, ShapeUnion);
         }
 #endif
-        XCopyArea(osd->display, osd->line_bitmap, osd->window, osd->gc, 0, y,
+        XCopyArea(osd->display, osd->line_bitmap, osd->window, osd->gc, 0, 0,
                   osd->screen_width, osd->line_height, 0, y);
+#ifndef DEBUG_XSHAPE
+        if (osd->update & UPD_mask) {
+          XCopyPlane(osd->display, osd->mask_bitmap, osd->mask_bitmap, osd->mask_gc_back, 0, 0, osd->screen_width, osd->line_height, 0, 0, (1<<0));
+          XShapeCombineMask(osd->display, osd->window, ShapeBounding, 0, y, osd->mask_bitmap, ShapeSubtract);
+        }
+#endif
       }
     }
     /* H/V offset or vertical positon was changed. Horizontal alignment is
@@ -445,12 +445,8 @@
              do {
              osd->lines[ytop].width = -1;
              } while (ytop++ < ybot);
-             osd->update |= UPD_lines;
            */
-          XCopyArea(osd->display, osd->line_bitmap, osd->window, osd->gc,
-                    report.xexpose.x, report.xexpose.y, report.xexpose.width,
-                    report.xexpose.height, report.xexpose.x,
-                    report.xexpose.y);
+          osd->update |= UPD_lines;
         }
         break;
       case NoExpose:
