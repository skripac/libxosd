#DPATCHLEVEL=0
# Revert xosd_set_timeout() back to old semantic: On setting a new value, the
# timeout for the currently shown display gets recalculated.
--- src/libxosd/xosd.c.orig	2004-11-09 18:57:06.000000000 +0100
+++ src/libxosd/xosd.c	2004-11-09 19:08:24.000000000 +0100
@@ -395,11 +395,13 @@ event_loop(void *osdv)
     if (osd->update & UPD_timer) {
       DEBUG(Dupdate, "UPD_timer");
       osd->update = UPD_none;
-      if (osd->timeout > 0)
+      if ((osd->generation & 1) && (osd->timeout > 0))
         gettimeofday(&osd->timeout_start, NULL);
       else
         timerclear(&osd->timeout_start);
-    } else if (timerisset(&osd->timeout_start)) {
+    }
+    /* Calculate timeout delta or hide display. */
+    if (timerisset(&osd->timeout_start)) {
       gettimeofday(&tv, NULL);
       tv.tv_sec -= osd->timeout;
       if (timercmp(&tv, &osd->timeout_start, <)) {
@@ -410,9 +412,10 @@ event_loop(void *osdv)
           tv.tv_sec -= 1;
         }
         tvp = &tv;
-      } else if (osd->generation & 1) {
+      } else {
         timerclear(&osd->timeout_start);
-        osd->update |= UPD_hide;
+        if (osd->generation & 1)
+          osd->update |= UPD_hide;
         continue;               /* Hide the window first and than restart the loop */
       }
     }
@@ -1261,7 +1264,10 @@ xosd_set_timeout(xosd * osd, int timeout
   FUNCTION_START(Dfunction);
   if (osd == NULL)
     return -1;
+  _xosd_lock(osd);
   osd->timeout = timeout;
+  osd->update |= UPD_timer;
+  _xosd_unlock(osd);
   return 0;
 }
 
