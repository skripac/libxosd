#DPATCHLEVEL=0
# Centralize update handling in master thread
# - Inline show(), hide(), update_pos(), expose_line(), resize(), force_redraw()
# - API tells only what changed, updates are done by master thread
--- src/libxosd/xosd.c.orig	2004-08-04 14:10:29.000000000 +0200
+++ src/libxosd/xosd.c	2004-08-04 14:12:19.000000000 +0200
@@ -138,6 +138,18 @@ struct xosd
 
   int mapped;                   /* DYN */
   int done;                     /* DYN */
+  enum {
+    UPD_none = 0,       /* Nothing changed */
+    UPD_hide = (1<<0),  /* Force hiding */
+    UPD_show = (1<<1),  /* Force display */
+    UPD_timer = (1<<2), /* Start timer */
+    UPD_pos = (1<<3),   /* Reposition window */
+    UPD_lines = (1<<4), /* Redraw content */
+    UPD_mask = (1<<5),  /* Update mask */
+    UPD_size = (1<<6),  /* Change font and window size */
+    UPD_content = UPD_mask | UPD_lines,
+    UPD_font = UPD_size | UPD_mask | UPD_lines | UPD_pos
+  } update;                     /* DYN */
 
   unsigned long pixel;          /* CACHE (pixel) */
   XColor colour;                /* CONF */
@@ -152,13 +164,6 @@ struct xosd
 /** Global error string. */
 char *xosd_error;
 
-/*
- * Forward declarations of internal functions. 
- */
-static void show(xosd *);
-static void hide(xosd *);
-static void update_pos(xosd * osd);
-
 /* Serialize access to the X11 connection. {{{
  *
  * Background: xosd needs a thread which handles X11 exposures. XWindowEvent()
@@ -193,6 +198,8 @@ static /*inline*/ void _xosd_unlock(xosd
   read(osd->pipefd[0], &c, sizeof(c));
   pthread_cond_signal(&osd->cond_wait);
   pthread_mutex_unlock(&osd->mutex);
+  if (osd->update & UPD_show) pthread_yield();
+  FUNCTION_END(Dlocking);
 }
 /* }}} */
 
@@ -334,40 +341,15 @@ draw_text(xosd *osd, int line)
 }
 /* }}} */
 
-/* The specified line needs to be redrawn.
- * We don't draw directly to the screen but to the line_bitmap for speedup.
- * The mask_bitmap needs to be updated as well, because it's needed for the
- * X-Shape-Extension. */
-static void
-expose_line(xosd * osd, int line)
-{
-  int y = osd->line_height * line;
-  assert(osd && osd->fontset);
-  FUNCTION_START(Dfunction);
-
-  // Clear the XShape mask
-  XFillRectangle(osd->display, osd->mask_bitmap, osd->mask_gc_back,
-                 0, y, osd->screen_width, osd->line_height);
-
-  switch (osd->lines[line].type) {
-  case LINE_blank:
-    return;
-
-  case LINE_text:
-    draw_text(osd, line);
-    break;
-
-  case LINE_percentage:
-  case LINE_slider:
-    draw_bar(osd, line);
-    break;
-  }
-  XCopyArea(osd->display, osd->line_bitmap, osd->window, osd->gc, 0, y,
-            osd->screen_width, osd->line_height, 0, y);
-}
-
-/** Handle X11 events and timeouts.
+/* Handles X11 events, timeouts and does the drawing. {{{
  * This is running in it's own thread for Expose-events.
+ * The order of update handling is important:
+ * 1. The size must be correct -> UPD_size first
+ * 2. The window must be mapped before something is drawn -> UPD_show
+ * 3. The XShape must be set before something is drawn -> UPD_mask, UPD_lines
+ * 4. Change the position last -> UPD_pos
+ * 5. Start the timer last to not account for processing time -> UPD_timer
+ * If you change this order, you'll get a broken display. You've been warned!
  */
 static void *
 event_loop(void *osdv)
@@ -385,10 +367,9 @@ event_loop(void *osdv)
   pthread_mutex_lock(&osd->mutex);
   DEBUG(Dtrace, "Request exposure events");
   XSelectInput(osd->display, osd->window, ExposureMask);
-
+  osd->update = UPD_size | UPD_pos;
   while (!osd->done) {
-    // DEBUG(Dtrace, "checking window event");
-    int retval;
+    int retval, line;
     fd_set readfds;
     struct timeval tv, *tvp = NULL;
 
@@ -396,7 +377,120 @@ event_loop(void *osdv)
     FD_SET(xfd, &readfds);
     FD_SET(osd->pipefd[0], &readfds);
 
-    if (timerisset(&osd->timeout_start)) {
+    /* The font, outline or shadow was changed. Recalculate line height,
+     * resize window and bitmaps. */
+    if (osd->update & UPD_size) {
+      XFontSetExtents *extents = XExtentsOfFontSet(osd->fontset);
+      DEBUG(Dupdate, "UPD_font");
+      osd->extent = &extents->max_logical_extent;
+      osd->line_height = osd->extent->height + osd->shadow_offset + 2 *
+        osd->outline_offset;
+      osd->height = osd->line_height * osd->number_lines;
+      for (line = 0; line < osd->number_lines; line++)
+        osd->lines[line].width = -1;
+
+      XResizeWindow(osd->display, osd->window, osd->screen_width, osd->height);
+      XFreePixmap(osd->display, osd->mask_bitmap);
+      osd->mask_bitmap = XCreatePixmap(osd->display, osd->window,
+          osd->screen_width, osd->height, 1);
+      XFreePixmap(osd->display, osd->line_bitmap);
+      osd->line_bitmap = XCreatePixmap(osd->display, osd->window,
+          osd->screen_width, osd->height, osd->depth);
+    }
+    /* Show display requested. */
+    if (osd->update & UPD_show) {
+      DEBUG(Dupdate, "UPD_show");
+      if (!osd->mapped) {
+        osd->mapped = 1;
+        XMapRaised(osd->display, osd->window);
+      }
+    }
+    /* The content changed, redraw lines and update XShape unless only colours
+     * where changed. */
+    if (osd->update & (UPD_mask | UPD_lines)) {
+      DEBUG(Dupdate, "UPD_lines");
+      for (line = 0; line < osd->number_lines; line++) {
+        int y = osd->line_height * line;
+#if 0 /* Turn on for debugging */
+        XSetForeground(osd->display, osd->gc, osd->outline_pixel);
+        XFillRectangle(osd->display, osd->line_bitmap, osd->gc, 0,
+            y, osd->screen_width, osd->line_height);
+#endif
+        if (osd->update & UPD_mask) {
+          XFillRectangle(osd->display, osd->mask_bitmap, osd->mask_gc_back, 0,
+              y, osd->screen_width, osd->line_height);
+        }
+        switch (osd->lines[line].type) {
+          case LINE_blank:
+            continue;
+          case LINE_text:
+            draw_text(osd, line);
+            break;
+          case LINE_percentage:
+          case LINE_slider:
+            draw_bar(osd, line);
+            break;
+        }
+#if 1 /* Turn off for debugging */
+        /* More than colours was changed, update XShape. */
+        if (osd->update & UPD_mask) {
+          DEBUG(Dupdate, "UPD_mask");
+          XShapeCombineMask(osd->display, osd->window, ShapeBounding, 0, 0,
+              osd->mask_bitmap, ShapeSet);
+        }
+#endif
+        XCopyArea(osd->display, osd->line_bitmap, osd->window, osd->gc, 0, y,
+            osd->screen_width, osd->line_height, 0, y);
+      }
+    }
+    /* H/V offset or vertical positon was changed. Horizontal alignment is
+     * handles internally as line realignment with UPD_content. */
+    if (osd->update & UPD_pos) {
+      int x = 0, y = 0;
+      DEBUG(Dupdate, "UPD_pos");
+      switch (osd->align) {
+        case XOSD_left:
+        case XOSD_center:
+          x = osd->screen_xpos + osd->hoffset;
+          break;
+        case XOSD_right:
+          x = osd->screen_xpos - osd->hoffset;
+      }
+      switch (osd->pos) {
+        case XOSD_bottom:
+          y = osd->screen_height - osd->height - osd->voffset;
+          break;
+        case XOSD_middle:
+          y = osd->screen_height / 2 - osd->height - osd->voffset;
+          break;
+        case XOSD_top:
+          y = osd->voffset;
+      }
+      XMoveWindow(osd->display, osd->window, x, y);
+    }
+    /* Hide display requested. */
+    if (osd->update & UPD_hide) {
+      DEBUG(Dupdate, "UPD_hide");
+      if (osd->mapped) {
+        XUnmapWindow(osd->display, osd->window);
+        pthread_mutex_lock(&osd->mutex_hide);
+        osd->mapped = 0;
+        pthread_cond_broadcast(&osd->cond_hide);
+        pthread_mutex_unlock(&osd->mutex_hide);
+      }
+    }
+    /* Flush all pennding X11 requests, if any. */
+    if (osd->update & ~UPD_timer) {
+      XFlush(osd->display);
+      osd->update &= UPD_timer;
+    }
+    /* Restart the timer when requested. */
+    if (osd->update & UPD_timer) {
+      DEBUG(Dupdate, "UPD_timer");
+      osd->update = UPD_none;
+      if (osd->timeout > 0)
+        gettimeofday(&osd->timeout_start, NULL);
+    } else if (timerisset(&osd->timeout_start)) {
       gettimeofday(&tv, NULL);
       tv.tv_sec -= osd->timeout;
       if (timercmp(&tv, &osd->timeout_start, <)) {
@@ -407,6 +501,10 @@ event_loop(void *osdv)
           tv.tv_sec -= 1;
         }
         tvp = &tv;
+      } else if(osd->mapped) {
+        timerclear(&osd->timeout_start);
+        osd->update |= UPD_hide;
+        continue; /* Hide the window first and than restart the loop */
       }
     }
 
@@ -423,12 +521,6 @@ event_loop(void *osdv)
       break;
     } else if (retval == 0) {
       DEBUG(Dselect, "select() timeout");
-      gettimeofday(&tv, NULL);
-      tv.tv_sec -= osd->timeout;
-      if (timerisset(&osd->timeout_start) && timercmp(&tv, &osd->timeout_start, >=)) {
-        timerclear(&osd->timeout_start);
-        hide(osd);
-      }
       continue; /* timeout */
     } else if (FD_ISSET(osd->pipefd[0], &readfds)) {
       /* Another thread wants to use the X11 connection */
@@ -473,36 +565,7 @@ event_loop(void *osdv)
 
   return NULL;
 }
-
-static void
-resize(xosd * osd)
-{                               /* Requires mutex lock. */
-  assert(osd);
-  FUNCTION_START(Dfunction);
-  XResizeWindow(osd->display, osd->window, osd->screen_width, osd->height);
-  XFreePixmap(osd->display, osd->mask_bitmap);
-  osd->mask_bitmap =
-    XCreatePixmap(osd->display, osd->window, osd->screen_width,
-                  osd->height, 1);
-  XFreePixmap(osd->display, osd->line_bitmap);
-  osd->line_bitmap =
-    XCreatePixmap(osd->display, osd->window, osd->screen_width,
-                  osd->height, osd->depth);
-}
-
-static void
-force_redraw(xosd * osd, int line)
-{                               /* Requires mutex lock. */
-  assert(osd);
-  FUNCTION_START(Dfunction);
-  resize(osd);
-  for (line = 0; line < osd->number_lines; line++) {
-    expose_line(osd, line);
-  }
-  XShapeCombineMask(osd->display, osd->window, ShapeBounding, 0, 0,
-                    osd->mask_bitmap, ShapeSet);
-  XFlush(osd->display);
-}
+/* }}} */
 
 /* Parse textual colour value. {{{ */
 static int
@@ -635,8 +698,6 @@ xosd_init(const char *font, const char *
   xosd_set_vertical_offset(osd, voffset);
   xosd_set_shadow_offset(osd, shadow_offset);
 
-  resize(osd);
-
   return osd;
 }
 /* }}} */
@@ -802,12 +863,6 @@ xosd_create(int number_lines)
   DEBUG(Dtrace, "stay on top");
   stay_on_top(osd->display, osd->window);
 
-  DEBUG(Dtrace, "finale resize");
-  update_pos(osd);              /* Shoule be inside lock, but no threads
-                                 * yet */
-  resize(osd);                  /* Shoule be inside lock, but no threads
-                                 * yet */
-
   DEBUG(Dtrace, "initializing event thread");
   pthread_create(&osd->event_thread, NULL, event_loop, osd);
 
@@ -980,11 +1035,7 @@ xosd_display(xosd * osd, int line, xosd_
   }
 
   _xosd_lock(osd);
-  force_redraw(osd, line);
-  if (osd->timeout > 0)
-    gettimeofday(&osd->timeout_start, NULL);
-  if (!osd->mapped)
-    show(osd);
+  osd->update |= UPD_content | UPD_timer | UPD_show;
   _xosd_unlock(osd);
 
 error:
@@ -1036,7 +1087,7 @@ xosd_set_colour(xosd * osd, const char *
 
   _xosd_lock(osd);
   retval = parse_colour(osd, &osd->colour, &osd->pixel, colour);
-  force_redraw(osd, -1);
+  osd->update |= UPD_lines;
   _xosd_unlock(osd);
 
   return retval;
@@ -1055,7 +1106,7 @@ xosd_set_shadow_colour(xosd * osd, const
 
   _xosd_lock(osd);
   retval = parse_colour(osd, &osd->shadow_colour, &osd->shadow_pixel, colour);
-  force_redraw(osd, -1);
+  osd->update |= UPD_lines;
   _xosd_unlock(osd);
 
   return retval;
@@ -1075,7 +1126,7 @@ xosd_set_outline_colour(xosd * osd, cons
   _xosd_lock(osd);
   retval =
     parse_colour(osd, &osd->outline_colour, &osd->outline_pixel, colour);
-  force_redraw(osd, -1);
+  osd->update |= UPD_lines;
   _xosd_unlock(osd);
 
   return retval;
@@ -1112,17 +1163,7 @@ xosd_set_font(xosd * osd, const char *fo
     if (osd->fontset != NULL)
       XFreeFontSet(osd->display, osd->fontset);
     osd->fontset = fontset2;
-
-    extents = XExtentsOfFontSet(osd->fontset);
-    osd->extent = &extents->max_logical_extent;
-
-    osd->line_height =
-      osd->extent->height + osd->shadow_offset + 2 * osd->outline_offset;
-    osd->height = osd->line_height * osd->number_lines;
-    for (line = 0; line < osd->number_lines; line++)
-      osd->lines[line].width = -1;
-
-    resize(osd);
+    osd->update |= UPD_font;
   }
   _xosd_unlock(osd);
 
@@ -1130,53 +1171,6 @@ xosd_set_font(xosd * osd, const char *fo
 }
 /* }}} */
 
-static void
-update_pos(xosd * osd)
-{                               /* Requires mutex lock. */
-  int x = 0, y = 0;
-  assert(osd);
-  FUNCTION_START(Dfunction);
-  switch (osd->pos) {
-  case XOSD_bottom:
-    y = osd->screen_height - osd->height - osd->voffset;
-    break;
-  case XOSD_middle:
-    y = osd->screen_height / 2 - osd->height - osd->voffset;
-    break;
-  case XOSD_top:
-  default:
-    y = osd->voffset;
-    break;
-  }
-
-  switch (osd->align) {
-  case XOSD_left:
-    x = osd->hoffset + osd->screen_xpos;
-    break;
-  case XOSD_center:
-    x = osd->hoffset + osd->screen_xpos;
-    /*
-     * which direction should this default to, left or right offset 
-     */
-    break;
-  case XOSD_right:
-    // x = XDisplayWidth (osd->display, osd->screen) - osd->width 
-    // - osd->hoffset; 
-    x = -(osd->hoffset) + osd->screen_xpos;
-    /*
-     * neither of these work right, I want the offset to flip so
-     * +offset is to the left instead of to the right when aligned
-     * right 
-     */
-    break;
-  default:
-    osd->x = 0;
-    break;
-  }
-
-  XMoveWindow(osd->display, osd->window, osd->x, osd->y);
-}
-
 /* xosd_set_shadow_offset -- Change the offset of the text shadow {{{ */
 int
 xosd_set_shadow_offset(xosd * osd, int shadow_offset)
@@ -1189,7 +1183,7 @@ xosd_set_shadow_offset(xosd * osd, int s
 
   _xosd_lock(osd);
   osd->shadow_offset = shadow_offset;
-  force_redraw(osd, -1);
+  osd->update |= UPD_font;
   _xosd_unlock(osd);
 
   return 0;
@@ -1208,7 +1202,7 @@ xosd_set_outline_offset(xosd * osd, int 
 
   _xosd_lock(osd);
   osd->outline_offset = outline_offset;
-  force_redraw(osd, -1);
+  osd->update |= UPD_font;
   _xosd_unlock(osd);
 
   return 0;
@@ -1225,7 +1219,7 @@ xosd_set_vertical_offset(xosd * osd, int
 
   _xosd_lock(osd);
   osd->voffset = voffset;
-  update_pos(osd);
+  osd->update |= UPD_pos;
   _xosd_unlock(osd);
 
   return 0;
@@ -1242,7 +1236,7 @@ xosd_set_horizontal_offset(xosd * osd, i
 
   _xosd_lock(osd);
   osd->hoffset = hoffset;
-  update_pos(osd);
+  osd->update |= UPD_pos;
   _xosd_unlock(osd);
 
   return 0;
@@ -1259,8 +1253,7 @@ xosd_set_pos(xosd * osd, xosd_pos pos)
 
   _xosd_lock(osd);
   osd->pos = pos;
-  update_pos(osd);
-  force_redraw(osd, -1);
+  osd->update |= UPD_pos;
   _xosd_unlock(osd);
 
   return 0;
@@ -1277,8 +1270,7 @@ xosd_set_align(xosd * osd, xosd_align al
 
   _xosd_lock(osd);
   osd->align = align;
-  update_pos(osd);
-  force_redraw(osd, -1);
+  osd->update |= UPD_content; /* XOSD_right depends on text width */
   _xosd_unlock(osd);
 
   return 0;
@@ -1316,21 +1308,6 @@ xosd_set_timeout(xosd * osd, int timeout
 }
 /* }}} */
 
-/** Hide current lines. **/
-static void
-hide(xosd * osd)
-{                               /* Requires mutex lock. */
-  FUNCTION_START(Dfunction);
-  assert(osd);
-  XUnmapWindow(osd->display, osd->window);
-  XFlush(osd->display);
-  pthread_mutex_lock(&osd->mutex_hide);
-  osd->mapped = 0;
-  pthread_cond_broadcast(&osd->cond_hide);
-  pthread_mutex_unlock(&osd->mutex_hide);
-  FUNCTION_END(Dfunction);
-}
-
 /* xosd_hide -- hide the display {{{ */
 int
 xosd_hide(xosd * osd)
@@ -1341,7 +1318,7 @@ xosd_hide(xosd * osd)
 
   if (osd->mapped) {
     _xosd_lock(osd);
-    hide(osd);
+    osd->update |= (osd->update & ~UPD_show) | UPD_hide;
     _xosd_unlock(osd);
     return 0;
   }
@@ -1349,18 +1326,6 @@ xosd_hide(xosd * osd)
 }
 /* }}} */
 
-/** Show current lines (again). **/
-static void
-show(xosd * osd)
-{                               /* Requires mutex lock. */
-  FUNCTION_START(Dfunction);
-  assert(osd);
-  osd->mapped = 1;
-  XMapRaised(osd->display, osd->window);
-  XFlush(osd->display);
-  FUNCTION_END(Dfunction);
-}
-
 /* xosd_show -- Show the display after being hidden {{{ */
 int
 xosd_show(xosd * osd)
@@ -1371,7 +1336,7 @@ xosd_show(xosd * osd)
 
   if (!osd->mapped) {
     _xosd_lock(osd);
-    show(osd);
+    osd->update |= (osd->update & ~UPD_hide) | UPD_show | UPD_timer;
     _xosd_unlock(osd);
     return 0;
   }
@@ -1407,7 +1372,7 @@ xosd_scroll(xosd * osd, int lines)
     dst->type = LINE_blank;
     dst->text = NULL;
   }
-  force_redraw(osd, -1);
+  osd->update |= UPD_content;
   _xosd_unlock(osd);
   return 0;
 }
