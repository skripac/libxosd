#DPATCHLEVEL=0
# Explicitly use 'struct xosd_line' instead of 'typedef xosd_line'
# Convert 'struct xosd_line' to 'union xosd_line'
--- src/libxosd/intern.h.orig	2004-08-04 16:37:26.000000000 +0200
+++ src/libxosd/intern.h	2004-08-04 16:11:00.000000000 +0200
@@ -63,14 +63,20 @@ static const enum DEBUG_LEVEL {
   } while (0)
 /* }}} */
 
-typedef struct
+enum LINE { LINE_blank, LINE_text, LINE_percentage, LINE_slider };
+union xosd_line
 {
-  enum { LINE_blank, LINE_text, LINE_percentage, LINE_slider } type;
-
-  char *text;
-  int width;
-  int percentage;
-} xosd_line;
+  enum LINE type;
+  struct xosd_text {
+    enum LINE type;
+    int width;
+    char *string;
+  } text;
+  struct xosd_bar {
+    enum LINE type;
+    int value;
+  } bar;
+};
 
 struct xosd
 {
@@ -133,7 +139,7 @@ struct xosd
   unsigned long pixel;          /* CACHE (pixel) */
   XColor colour;                /* CONF */
 
-  xosd_line *lines;             /* CONF */
+  union xosd_line *lines;       /* CONF */
   int number_lines;             /* CONF */
 
   int timeout;                  /* CONF delta time */
--- src/libxosd/xosd.c.orig	2004-08-04 16:37:57.000000000 +0200
+++ src/libxosd/xosd.c	2004-08-04 16:27:12.000000000 +0200
@@ -93,7 +93,7 @@ _draw_bar(xosd *osd, int nbars, int on, 
 static void
 draw_bar(xosd *osd, int line)
 {
-  xosd_line *l = &osd->lines[line];
+  struct xosd_bar *l = &osd->lines[line].bar;
   int is_slider = l->type == LINE_slider, nbars, on;
   XRectangle p, m;
   p.x = XOFFSET;
@@ -128,9 +128,9 @@ draw_bar(xosd *osd, int line)
       break;
     }
   }
-  on = ((nbars - is_slider) * l->percentage) / 100;
+  on = ((nbars - is_slider) * l->value) / 100;
 
-  DEBUG(Dvalue, "percent=%d, nbars=%d, on=%d", l->percentage, nbars, on);
+  DEBUG(Dvalue, "percent=%d, nbars=%d, on=%d", l->value, nbars, on);
 
   /* Outline */
   if (osd->outline_offset) {
@@ -157,27 +157,27 @@ draw_bar(xosd *osd, int line)
 
 /* Draw text. {{{ */
 static void /*inline*/
-_draw_text(xosd *osd, xosd_line *l, int x, int y)
+_draw_text(xosd *osd, char *string, int x, int y)
 {
-  int len = strlen(l->text);
-  XmbDrawString(osd->display, osd->mask_bitmap, osd->fontset, osd->mask_gc, x, y, l->text, len);
-  XmbDrawString(osd->display, osd->line_bitmap, osd->fontset, osd->gc,      x, y, l->text, len);
+  int len = strlen(string);
+  XmbDrawString(osd->display, osd->mask_bitmap, osd->fontset, osd->mask_gc, x, y, string, len);
+  XmbDrawString(osd->display, osd->line_bitmap, osd->fontset, osd->gc,      x, y, string, len);
 }
 static void
 draw_text(xosd *osd, int line)
 {
   int x = XOFFSET, y = osd->line_height * line - osd->extent->y;
-  xosd_line *l = &osd->lines[line];
+  struct xosd_text *l = &osd->lines[line].text;
 
   assert(osd);
   FUNCTION_START(Dfunction);
 
-  if (l->text == NULL)
+  if (l->string == NULL)
     return;
 
   if (l->width < 0) {
     XRectangle rect;
-    XmbTextExtents(osd->fontset, l->text, strlen(l->text), NULL, &rect);
+    XmbTextExtents(osd->fontset, l->string, strlen(l->string), NULL, &rect);
     l->width = rect.width;
   }
 
@@ -193,7 +193,7 @@ draw_text(xosd *osd, int line)
 
   if (osd->shadow_offset) {
     XSetForeground(osd->display, osd->gc, osd->shadow_pixel);
-    _draw_text(osd, l, x + osd->shadow_offset, y + osd->shadow_offset);
+    _draw_text(osd, l->string, x + osd->shadow_offset, y + osd->shadow_offset);
   }
   if (osd->outline_offset) {
     int i, j;
@@ -201,11 +201,11 @@ draw_text(xosd *osd, int line)
     /* FIXME: echo . | osd_cat -O 50 -p middle -A center */
     for (i = 1; i <= osd->outline_offset; i++)
       for (j = 0; j < 9; j++)
-        _draw_text(osd, l, x + (i/3-1)*i, y + (i%3-1)*i);
+        _draw_text(osd, l->string, x + (i/3-1)*i, y + (i%3-1)*i);
   }
   if (1) {
     XSetForeground(osd->display, osd->gc, osd->pixel);
-    _draw_text(osd, l, x, y);
+    _draw_text(osd, l->string, x, y);
   }
 }
 /* }}} */
@@ -256,7 +256,8 @@ event_loop(void *osdv)
         osd->outline_offset;
       osd->height = osd->line_height * osd->number_lines;
       for (line = 0; line < osd->number_lines; line++)
-        osd->lines[line].width = -1;
+        if (osd->lines[line].type == LINE_text)
+          osd->lines[line].text.width = -1;
 
       XResizeWindow(osd->display, osd->window, osd->screen_width, osd->height);
       XFreePixmap(osd->display, osd->mask_bitmap);
@@ -614,16 +615,14 @@ xosd_create(int number_lines)
 
   DEBUG(Dtrace, "initializing number lines");
   osd->number_lines = number_lines;
-  osd->lines = malloc(sizeof(xosd_line) * osd->number_lines);
+  osd->lines = malloc(sizeof(union xosd_line) * osd->number_lines);
   if (osd->lines == NULL) {
     xosd_error = "Out of memory";
     goto error1;
   }
 
-  for (i = 0; i < osd->number_lines; i++) {
-    osd->lines[i].type = LINE_blank;
-    osd->lines[i].text = NULL;
-  }
+  for (i = 0; i < osd->number_lines; i++)
+    memset(&osd->lines[i], 0, sizeof(union xosd_line));
 
   DEBUG(Dtrace, "misc osd variable initialization");
   osd->mapped = 0;
@@ -793,10 +792,9 @@ xosd_destroy(xosd * osd)
   XCloseDisplay(osd->display);
 
   DEBUG(Dtrace, "freeing lines");
-  for (i = 0; i < osd->number_lines; i++) {
-    if (osd->lines[i].text)
-      free(osd->lines[i].text);
-  }
+  for (i = 0; i < osd->number_lines; i++)
+    if (osd->lines[i].type == LINE_text && osd->lines[i].text.string)
+      free(osd->lines[i].text.string);
   free(osd->lines);
 
   DEBUG(Dtrace, "destroying condition and mutex");
@@ -838,7 +836,6 @@ xosd_display(xosd * osd, int line, xosd_
 {
   int ret = -1;
   va_list a;
-  xosd_line *l = &osd->lines[line];
 
   FUNCTION_START(Dfunction);
   if (osd == NULL)
@@ -855,6 +852,7 @@ xosd_display(xosd * osd, int line, xosd_
   case XOSD_printf:
     {
       char buf[2000];
+      struct xosd_text *l = &osd->lines[line].text;
       char *string = va_arg(a, char *);
       if (command == XOSD_printf) {
         if (vsnprintf(buf, sizeof(buf), string, a) >= sizeof(buf)) {
@@ -866,18 +864,18 @@ xosd_display(xosd * osd, int line, xosd_
       if (string && *string) {
         ret = strlen(string);
         l->type = LINE_text;
-        if (l->text == NULL) {
-          l->text = malloc(ret + 1);
+        if (l->string == NULL) {
+          l->string = malloc(ret + 1);
         } else {
-          realloc(l->text, ret + 1);
+          realloc(l->string, ret + 1);
         }
-        memcpy(l->text, string, ret + 1);
+        memcpy(l->string, string, ret + 1);
       } else {
         ret = 0;
         l->type = LINE_blank;
-        if (l->text != NULL) {
-          free(l->text);
-          l->text = NULL;
+        if (l->string != NULL) {
+          free(l->string);
+          l->string = NULL;
         }
         l->width = -1;
       }
@@ -887,10 +885,11 @@ xosd_display(xosd * osd, int line, xosd_
   case XOSD_percentage:
   case XOSD_slider:
     {
+      struct xosd_bar *l = &osd->lines[line].bar;
       ret = va_arg(a, int);
       ret = (ret < 0) ? 0 : (ret > 100) ? 100 : ret;
       l->type = (command == XOSD_percentage) ? LINE_percentage : LINE_slider;
-      l->percentage = ret;
+      l->value = ret;
       break;
     }
 
@@ -1216,7 +1215,7 @@ int
 xosd_scroll(xosd * osd, int lines)
 {
   int i;
-  xosd_line *src, *dst;
+  union xosd_line *src, *dst;
 
   FUNCTION_START(Dfunction);
   if (osd == NULL)
@@ -1227,9 +1226,9 @@ xosd_scroll(xosd * osd, int lines)
   _xosd_lock(osd);
   /* Clear old text */
   for (i=0, src=osd->lines; i < lines; i++,src++)
-    if (src->text) {
-      free(src->text);
-      src->text = NULL;
+    if (src->type == LINE_text && src->text.string) {
+      free(src->text.string);
+      src->text.string = NULL;
     }
   /* Move following lines forward */
   for (dst=osd->lines; i < osd->number_lines; i++)
@@ -1237,7 +1236,7 @@ xosd_scroll(xosd * osd, int lines)
   /* Blank new lines */
   for (;dst < src; dst++) {
     dst->type = LINE_blank;
-    dst->text = NULL;
+    dst->text.string = NULL;
   }
   osd->update |= UPD_content;
   _xosd_unlock(osd);
