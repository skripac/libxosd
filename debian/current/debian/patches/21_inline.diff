#DPATCHLEVEL=0
# Inline several functions:
# - display_string() because it's called only once
# - set_font() in xosd_set_font() to simplify structure
# - set_colour() because background needs to be set only once and
#   foreground is set every time.
--- src/libxosd/xosd.c.orig	2004-08-04 13:49:48.000000000 +0200
+++ src/libxosd/xosd.c	2004-08-04 14:00:07.000000000 +0200
@@ -474,31 +474,6 @@ event_loop(void *osdv)
   return NULL;
 }
 
-static int
-display_string(xosd * osd, xosd_line * l, char *string)
-{
-  assert(osd);
-  FUNCTION_START(Dfunction);
-
-  if (string && *string) {
-    l->type = LINE_text;
-    if (l->text == NULL) {
-      l->text = strdup(string);
-    } else {
-      realloc(l->text, strlen(string) + 1);
-      strcpy(l->text, string);
-    }
-  } else {
-    l->type = LINE_blank;
-    if (l->text != NULL) {
-      free(l->text);
-      l->text = NULL;
-    }
-  }
-
-  return 0;
-}
-
 static void
 resize(xosd * osd)
 {                               /* Requires mutex lock. */
@@ -529,48 +504,6 @@ force_redraw(xosd * osd, int line)
   XFlush(osd->display);
 }
 
-static int
-set_font(xosd * osd, const char *font)
-{                               /* Requires mutex lock. */
-  XFontSet fontset2;
-  char **missing;
-  int nmissing;
-  char *defstr;
-  int line;
-
-  XFontSetExtents *extents;
-
-  assert(osd);
-  FUNCTION_START(Dfunction);
-
-  /*
-   * Try to create the new font. If it doesn't succeed, keep old font. 
-   */
-  fontset2 = XCreateFontSet(osd->display, font, &missing, &nmissing, &defstr);
-  XFreeStringList(missing);
-  if (fontset2 == NULL) {
-    xosd_error = "Requested font not found";
-    return -1;
-  }
-
-  if (osd->fontset) {
-    XFreeFontSet(osd->display, osd->fontset);
-    osd->fontset = NULL;
-  }
-  osd->fontset = fontset2;
-
-  extents = XExtentsOfFontSet(osd->fontset);
-  osd->extent = &extents->max_logical_extent;
-
-  osd->line_height =
-    osd->extent->height + osd->shadow_offset + 2 * osd->outline_offset;
-  osd->height = osd->line_height * osd->number_lines;
-  for (line = 0; line < osd->number_lines; line++)
-    osd->lines[line].width = -1;
-
-  return 0;
-}
-
 /* Parse textual colour value. {{{ */
 static int
 parse_colour(xosd *osd, XColor *col, unsigned long *pixel, const char *colour)
@@ -603,26 +536,6 @@ parse_colour(xosd *osd, XColor *col, uns
 }
 /* }}} */
 
-static int
-set_colour(xosd * osd, const char *colour)
-{                               /* Requires mutex lock. */
-  int retval = 0;
-
-  FUNCTION_START(Dfunction);
-  assert(osd);
-
-  retval = parse_colour(osd, &osd->colour, &osd->pixel, colour);
-
-  DEBUG(Dtrace, "setting foreground");
-  XSetForeground(osd->display, osd->gc, osd->pixel);
-  DEBUG(Dtrace, "setting background");
-  XSetBackground(osd->display, osd->gc,
-                 WhitePixel(osd->display, osd->screen));
-
-  FUNCTION_END(Dfunction);
-  return retval;
-}
-
 /* Tell window manager to put window topmost. {{{ */
 void stay_on_top(Display * dpy, Window win)
 {
@@ -814,7 +727,7 @@ xosd_create(int number_lines)
   osd->depth = DefaultDepth(osd->display, osd->screen);
 
   DEBUG(Dtrace, "font selection info");
-  set_font(osd, osd_default_font);
+  xosd_set_font(osd, osd_default_font);
   if (osd->fontset == NULL) {
     /*
      * if we still don't have a fontset, then abort 
@@ -869,6 +782,9 @@ xosd_create(int number_lines)
   osd->mask_gc = XCreateGC(osd->display, osd->mask_bitmap, 0, NULL);
   osd->mask_gc_back = XCreateGC(osd->display, osd->mask_bitmap, 0, NULL);
 
+  XSetBackground(osd->display, osd->gc,
+                 WhitePixel(osd->display, osd->screen));
+
   XSetForeground(osd->display, osd->mask_gc_back,
                  BlackPixel(osd->display, osd->screen));
   XSetBackground(osd->display, osd->mask_gc_back,
@@ -881,7 +797,7 @@ xosd_create(int number_lines)
 
 
   DEBUG(Dtrace, "setting colour");
-  set_colour(osd, osd_default_colour);
+  xosd_set_colour(osd, osd_default_colour);
 
   DEBUG(Dtrace, "stay on top");
   stay_on_top(osd->display, osd->window);
@@ -1025,7 +941,24 @@ xosd_display(xosd * osd, int line, xosd_
         }
         string = buf;
       }
-      ret = display_string(osd, l, string);
+      if (string && *string) {
+        ret = strlen(string);
+        l->type = LINE_text;
+        if (l->text == NULL) {
+          l->text = malloc(ret + 1);
+        } else {
+          realloc(l->text, ret + 1);
+        }
+        memcpy(l->text, string, ret + 1);
+      } else {
+        ret = 0;
+        l->type = LINE_blank;
+        if (l->text != NULL) {
+          free(l->text);
+          l->text = NULL;
+        }
+        l->width = -1;
+      }
       break;
     }
 
@@ -1102,7 +1035,7 @@ xosd_set_colour(xosd * osd, const char *
     return -1;
 
   _xosd_lock(osd);
-  retval = set_colour(osd, colour);
+  retval = parse_colour(osd, &osd->colour, &osd->pixel, colour);
   force_redraw(osd, -1);
   _xosd_unlock(osd);
 
@@ -1154,6 +1087,10 @@ xosd_set_outline_colour(xosd * osd, cons
 int
 xosd_set_font(xosd * osd, const char *font)
 {
+  XFontSet fontset2;
+  char **missing;
+  int nmissing;
+  char *defstr;
   int ret = 0;
 
   FUNCTION_START(Dfunction);
@@ -1162,10 +1099,31 @@ xosd_set_font(xosd * osd, const char *fo
   if (font == NULL)
     return -1;
 
+  /*
+   * Try to create the new font. If it doesn't succeed, keep old font. 
+   */
   _xosd_lock(osd);
-  ret = set_font(osd, font);
-  if (ret == 0)
+  fontset2 = XCreateFontSet(osd->display, font, &missing, &nmissing, &defstr);
+  XFreeStringList(missing);
+  if (fontset2 == NULL) {
+    xosd_error = "Requested font not found";
+    ret = -1;
+  } else {
+    if (osd->fontset != NULL)
+      XFreeFontSet(osd->display, osd->fontset);
+    osd->fontset = fontset2;
+
+    extents = XExtentsOfFontSet(osd->fontset);
+    osd->extent = &extents->max_logical_extent;
+
+    osd->line_height =
+      osd->extent->height + osd->shadow_offset + 2 * osd->outline_offset;
+    osd->height = osd->line_height * osd->number_lines;
+    for (line = 0; line < osd->number_lines; line++)
+      osd->lines[line].width = -1;
+
     resize(osd);
+  }
   _xosd_unlock(osd);
 
   return ret;
