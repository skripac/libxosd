[COSMETIC]
I rewrote timeout_func() again, because it got inconsistent again with the
addition of track-time on pause.
* Next after Pause without show.track displayed Unpause, not Play.
* Display time at Unpause.
* Less xmms_remote_*() function calls.
* Check for buffer overflows using snprintf().
* Easier to read and understand (Thanks to ascii-art :-).

--- src/xmms_plugin/xmms_osd.c.orig	2003-09-28 23:09:56.000000000 +0200
+++ src/xmms_plugin/xmms_osd.c	2003-09-28 22:54:14.000000000 +0200
@@ -325,7 +325,7 @@ timeout_func (gpointer data)
 {
   struct state current;
   char *text = NULL;
-  char *title2 = NULL;
+  gboolean songchange, showtext, withtime = FALSE;
   gint playlist_length;
 
   DEBUG ("timeout func");
@@ -343,88 +343,81 @@ timeout_func (gpointer data)
   current.volume = xmms_remote_get_main_volume (gp.xmms_session);
   current.balance = (xmms_remote_get_balance (gp.xmms_session) + 100) / 2;
 
-
   /* Get the current title only if the playlist is not empty. Otherwise
    * it'll crash. Don't forget to free the title! */
   playlist_length = xmms_remote_get_playlist_length (gp.xmms_session);
   current.title = playlist_length
     ? xmms_remote_get_playlist_title (gp.xmms_session, current.pos) : NULL;
-  if (current.title)
-    {
-      replace_hexcodes (current.title);
-    }
 
-  /* Display title when
-   * - play started
-   * - unpaused
-   * - the position changed (playlist advanced)
-   * - title changed (current title was deleted from playlist)
-   *   - no old but new
-   *   - old but no new
-   *   - old and new are different
+  /* Check for song change. Deleting a song from the playlist only changed the
+   * name, but not the position, so compare also by (still hexencoded) name. */
+  songchange =
+    (previous.pos != current.pos) ||
+    (previous.title == NULL && current.title != NULL) ||
+    (previous.title != NULL && current.title == NULL) ||
+    (previous.title != NULL && current.title != NULL &&
+     (g_strcasecmp (previous.title, current.title) != 0));
+
+  /* Possible show something when either song or state changed. */
+  showtext = songchange ||
+    ((current.playing != previous.playing) ||
+     (current.paused != previous.paused));
+
+  /* Determine right text depending on state and state/title change.
+   *    +---+          +---+
+   *    |   |          |   |
+   *    +->PLAY<---->STOP<-+
+   *        ^          ^
+   *        |          |
+   *        +-->PAUSE--+
    */
-  if ((!previous.playing && current.playing) ||
-      (previous.paused && !current.paused) ||
-      (current.pos != previous.pos) ||
-      (previous.title == NULL && current.title != NULL) ||
-      (previous.title != NULL && current.title == NULL) ||
-      (previous.title != NULL && current.title != NULL &&
-       (g_strcasecmp (previous.title, current.title) != 0)))
-    {
-      if (show.trackname)
-	{
-	  if (current.title != NULL)
-	    {
-	      title2 = malloc (strlen (current.title) + 26);
-	      sprintf (title2, "%i/%i: %s",
-		       current.pos + 1, playlist_length, current.title);
-	    }
-	}
-    }
-
-  /* Determine right text depending on state and title change. */
-  if (!current.playing && (title2 || previous.playing))
-    {
-      if (show.stop)
-	text = "Stopped";
-    }
-  else if (!previous.paused && current.paused)
-    {
-      if (show.pause)
-	{
-	  text = "Paused";
-	  if (show.trackname)
-	    {
-	      if (current.title != NULL)
-		{
-		  title2 = realloc (title2, strlen (current.title) + 52);
-		  sprintf (title2, "%i/%i: %s (%.2i:%.2i)",
-			   current.pos + 1,
-			   playlist_length,
-			   current.title,
-			   xmms_remote_get_output_time (gp.xmms_session) /
-			   1000 / 60,
-			   xmms_remote_get_output_time (gp.xmms_session) /
-			   1000 % 60);
-		}
-	    }
-	}
-    }
-  else if (previous.paused && !current.paused)
-    {
-      if (show.pause)
-	text = "Unpaused";
-    }
-  else if (current.playing && (title2 || !previous.playing))
-    {
-      text = "Play";
+  if (!current.playing)
+    {				/* {PLAY,PAUSE,STOP} -> STOP */
+      text = "Stopped";
+      showtext &= show.stop;
+    }
+  else if (current.paused)
+    {				/* PLAY -> PAUSE */
+      text = "Paused";
+      showtext &= show.pause;
+      withtime = TRUE;
+    }
+  else if (previous.paused && !current.paused && !songchange)
+    {				/* PAUSE -SameSong-> PLAY */
+      text = "Unpaused";
+      showtext &= show.pause;
+      withtime = TRUE;
+    }
+  else
+    {				/* {PLAY,STOP} -> PLAY <-OtherSong- PAUSE */
+      text = "Playing";
+      showtext &= show.trackname;
     }
 
   /* Decide what to display, in decreasing priority. */
-  if (text)
+  if (showtext)
     {
       xosd_display (osd, 0, XOSD_string, text);
-      xosd_display (osd, 1, XOSD_string, title2 ? title2 : "");
+      if (show.trackname && (current.title != NULL))
+	{
+	  int len;
+	  char *title;
+	  gint playlist_time;
+
+	  len = 13 + strlen (current.title) + (withtime ? 11 : 0);
+	  title = malloc (len);
+	  playlist_time =
+	    withtime ? xmms_remote_get_output_time (gp.xmms_session) : 0;
+	  snprintf (title, len,
+		    withtime ? "%i/%i: %s (%i:%02i)" : "%i/%i: %s",
+		    current.pos + 1, playlist_length, current.title,
+		    playlist_time / 1000 / 60, playlist_time / 1000 % 60);
+	  replace_hexcodes (title);
+	  xosd_display (osd, 1, XOSD_string, title);
+	  free (title);
+	}
+      else
+	xosd_display (osd, 1, XOSD_string, "");
     }
   else if (current.volume != previous.volume && show.volume)
     {
@@ -454,9 +447,6 @@ timeout_func (gpointer data)
     }
 
 skip:
-  if (title2)
-    free (title2);
-
   /* copy current state (including title) for future comparison. Free old
    * title first. */
   if (previous.title)
