#DPATCHLEVEL=0
# Extract common functions to reduce duplicate draing code
--- src/libxosd/xosd.c.orig	2004-08-04 12:32:53.000000000 +0200
+++ src/libxosd/xosd.c	2004-08-04 12:34:48.000000000 +0200
@@ -75,6 +75,7 @@ static const enum DEBUG_LEVEL {
 
 #define SLIDER_SCALE 0.8
 #define SLIDER_SCALE_ON 0.7
+#define XOFFSET 10
 
 const char *osd_default_font =
   "-misc-fixed-medium-r-semicondensed--*-*-*-*-c-*-*-*";
@@ -107,16 +108,16 @@ struct xosd
   int screen;
   Window window;
   unsigned int depth;
-  Pixmap mask_bitmap;
-  Pixmap line_bitmap;
+  Pixmap mask_bitmap;           /* XShape mask */
+  Pixmap line_bitmap;           /* offscreen bitmap */
   Visual *visual;
 
   XFontSet fontset;
   XRectangle *extent;
 
   GC gc;
-  GC mask_gc;
-  GC mask_gc_back;
+  GC mask_gc;                   /* white on black to set XShape mask */
+  GC mask_gc_back;              /* black on white to clear XShape mask */
 
   int screen_width;
   int screen_height;
@@ -200,119 +201,151 @@ static /*inline*/ void _xosd_unlock(xosd
   pthread_mutex_unlock(&osd->mutex);
 }
 
+/* Draw percentage/slider bar. */
+static void /*inline*/
+_draw_bar(xosd *osd, int nbars, int on, XRectangle *p, XRectangle *mod, int is_slider)
+{
+  int i;
+  XRectangle rs[2];
+  rs[0].x = rs[1].x = mod->x + p->x;
+  rs[0].y = (rs[1].y = mod->y + p->y) + p->height/3;
+  rs[0].width = mod->width + p->width * SLIDER_SCALE;
+  rs[0].height = mod->height + p->height/3;
+  rs[1].width = mod->width + p->width * SLIDER_SCALE_ON;
+  rs[1].height = mod->height + p->height;
+  for (i = 0; i < nbars; i++, rs[0].x = rs[1].x += p->width) {
+    XRectangle *r = &(rs[is_slider ? (i == on) : (i < on)]);
+    XFillRectangles(osd->display, osd->mask_bitmap, osd->mask_gc, r, 1);
+    XFillRectangles(osd->display, osd->line_bitmap, osd->gc,      r, 1);
+  }
+}
 static void
-draw_bar(xosd * osd, Drawable d, GC gc, int x, int y,
-         int percent, int is_slider, int set_color, int draw_all)
+draw_bar(xosd *osd, int line)
 {
-  int barw, barh, nbars;
-  int on, i, xx;
-  struct bar
-  {
-    int w, h, y;
-  } bar[2];
+  xosd_line *l = &osd->lines[line];
+  int is_slider = l->type == LINE_slider, nbars, on;
+  XRectangle p, m;
+  p.x = XOFFSET;
+  p.y = osd->line_height * line;
+  p.width = -osd->extent->y / 2;
+  p.height = -osd->extent->y;
 
   assert(osd);
   FUNCTION_START(Dfunction);
 
-  /*
-   * bar size and dimension 
-   */
-  bar[0].h = bar[1].h = barh = -osd->extent->y;
-  bar[0].w = bar[1].w = barw = barh / 2;
-  bar[0].y = bar[1].y = y;
-
-  bar[0].h /= 3;
-  bar[1].w *= SLIDER_SCALE_ON;
-  bar[0].w *= SLIDER_SCALE;
-  bar[0].y += bar[0].h;
-
-  // check how to behave
+  /* Calculate number of bars in automatic mode */
   if (osd->bar_length == -1) {
-    nbars = (osd->screen_width * SLIDER_SCALE) / barw;
+    nbars = (osd->screen_width * SLIDER_SCALE) / p.width;
+    switch (osd->align) {
+    case XOSD_center:
+      p.x = osd->screen_width * ((1 - SLIDER_SCALE) / 2);
+      break;
+    case XOSD_right:
+      p.x = osd->screen_width * (1 - SLIDER_SCALE);
+    case XOSD_left:
+      break;
+    }
   } else {
     nbars = osd->bar_length;
-
-    // fix x coord
     switch (osd->align) {
     case XOSD_center:
-      x = (osd->screen_width - (nbars * barw)) / 2;
+      p.x = (osd->screen_width - (nbars * p.width)) / 2;
       break;
     case XOSD_right:
-      x = osd->screen_width - (nbars * barw) - x;
+      p.x = osd->screen_width - (nbars * p.width) - p.x;
     case XOSD_left:
       break;
     }
   }
-  on = ((nbars - is_slider) * percent) / 100;
+  on = ((nbars - is_slider) * l->percentage) / 100;
 
-  DEBUG(Dvalue, "percent=%d, nbars=%d, on=%d", percent, nbars, on);
+  DEBUG(Dvalue, "percent=%d, nbars=%d, on=%d", l->percentage, nbars, on);
 
-  /*
-   * Outline 
-   */
-  if (osd->outline_offset && (draw_all || !(osd->fill_mask & FILL_OUTLINE))) {
-    if (set_color)
-      XSetForeground(osd->display, gc, osd->outline_pixel);
-    for (xx = x, i = 0; i < nbars; xx += barw, i++) {
-      struct bar *b = &(bar[is_slider ? (i == on) : (i < on)]);
-      XFillRectangle(osd->display, d, gc,
-                     xx - osd->outline_offset,
-                     b->y - osd->outline_offset,
-                     b->w + (2 * osd->outline_offset),
-                     b->h + (2 * osd->outline_offset));
-    }
+  /* Outline */
+  if (osd->outline_offset) {
+    m.x = m.y = -osd->outline_offset;
+    m.width = m.height = 2 * osd->outline_offset;
+    XSetForeground(osd->display, osd->gc, osd->outline_pixel);
+    _draw_bar(osd, nbars, on, &p, &m, is_slider);
   }
-  /*
-   * Shadow 
-   */
-  if (osd->shadow_offset && (draw_all || !(osd->fill_mask & FILL_SHADOW))) {
-    if (set_color)
-      XSetForeground(osd->display, gc, osd->shadow_pixel);
-    for (xx = x, i = 0; i < nbars; xx += barw, i++) {
-      struct bar *b = &(bar[is_slider ? (i == on) : (i < on)]);
-      XFillRectangle(osd->display, d, gc,
-                     xx + osd->shadow_offset,
-                     b->y + osd->shadow_offset, b->w, b->h);
-    }
+  /* Shadow */
+  if (osd->shadow_offset) {
+    m.x = m.y = osd->shadow_offset;
+    m.width = m.height = 0;
+    XSetForeground(osd->display, osd->gc, osd->shadow_pixel);
+    _draw_bar(osd, nbars, on, &p, &m, is_slider);
   }
-  /*
-   * Bar/Slider 
-   */
-  if (draw_all || !(osd->fill_mask & FILL_FACE)) {
-    if (set_color)
-      XSetForeground(osd->display, gc, osd->pixel);
-    for (xx = x, i = 0; i < nbars; xx += barw, i++) {
-      struct bar *b = &(bar[is_slider ? (i == on) : (i < on)]);
-      XFillRectangle(osd->display, d, gc, xx, b->y, b->w, b->h);
-    }
+  /* Bar/Slider */
+  if (1) {
+    m.x = m.y = m.width = m.height = 0;
+    XSetForeground(osd->display, osd->gc, osd->pixel);
+    _draw_bar(osd, nbars, on, &p, &m, is_slider);
   }
 }
 
-static void
-draw_with_mask(xosd * osd, xosd_line * l, int inX, int inPlace, int inY,
-               int draw_line_bitmap)
+/* Draw text */
+static void /*inline*/
+_draw_text(xosd *osd, xosd_line *l, int x, int y)
 {
   int len = strlen(l->text);
+  XmbDrawString(osd->display, osd->mask_bitmap, osd->fontset, osd->mask_gc, x, y, l->text, len);
+  XmbDrawString(osd->display, osd->line_bitmap, osd->fontset, osd->gc,      x, y, l->text, len);
+}
+static void
+draw_text(xosd *osd, int line)
+{
+  int x = XOFFSET, y = osd->line_height * line - osd->extent->y;
+  xosd_line *l = &osd->lines[line];
+
+  assert(osd);
   FUNCTION_START(Dfunction);
-  XmbDrawString(osd->display,
-                osd->mask_bitmap,
-                osd->fontset,
-                osd->mask_gc, inX, inPlace + inY, l->text, len);
-  if (draw_line_bitmap) {
-    XmbDrawString(osd->display,
-                  osd->line_bitmap,
-                  osd->fontset, osd->gc, inX, inY, l->text, len);
+
+  if (l->text == NULL)
+    return;
+
+  if (l->width < 0) {
+    XRectangle rect;
+    XmbTextExtents(osd->fontset, l->text, strlen(l->text), NULL, &rect);
+    l->width = rect.width;
+  }
+
+  switch (osd->align) {
+  case XOSD_center:
+    x = (osd->screen_width - l->width) / 2;
+    break;
+  case XOSD_right:
+    x = osd->screen_width - l->width - x;
+  case XOSD_left:
+    break;
+  }
+
+  if (osd->shadow_offset) {
+    XSetForeground(osd->display, osd->gc, osd->shadow_pixel);
+    _draw_text(osd, l, x + osd->shadow_offset, y + osd->shadow_offset);
+  }
+  if (osd->outline_offset) {
+    int i, j;
+    XSetForeground(osd->display, osd->gc, osd->outline_pixel);
+    /* FIXME: echo . | osd_cat -O 50 -p middle -A center */
+    for (i = 1; i <= osd->outline_offset; i++)
+      for (j = 0; j < 9; j++)
+        _draw_text(osd, l, x + (i/3-1)*i, y + (i%3-1)*i);
+  }
+  if (1) {
+    XSetForeground(osd->display, osd->gc, osd->pixel);
+    _draw_text(osd, l, x, y);
   }
 }
 
+/* The specified line needs to be redrawn.
+ * We don't draw directly to the screen but to the line_bitmap for speedup.
+ * The mask_bitmap needs to be updated as well, because it's needed for the
+ * X-Shape-Extension. */
 static void
 expose_line(xosd * osd, int line)
 {
-  int x = 10; // FIXME: Where does this value come from?
   int y = osd->line_height * line;
-  int i;
-  xosd_line *l = &osd->lines[line];
-  assert(osd);
+  assert(osd && osd->fontset);
   FUNCTION_START(Dfunction);
 
   osd->fill_mask = osd->outline_offset ? FILL_OUTLINE :
@@ -329,93 +362,27 @@ expose_line(xosd * osd, int line)
     XSetForeground(osd->display, osd->gc, osd->outline_pixel);
     break;
   }
-
   XFillRectangle(osd->display, osd->line_bitmap, osd->gc,
-      0, 0, osd->screen_width, osd->line_height);
+      0, y, osd->screen_width, osd->line_height);
 
-  /*
-   * don't need to lock here because functions that call expose_line
-   * should have already locked the mutex 
-   */
+  // Clear the XShape mask
   XFillRectangle(osd->display, osd->mask_bitmap, osd->mask_gc_back,
                  0, y, osd->screen_width, osd->line_height);
 
-  switch (l->type) {
+  switch (osd->lines[line].type) {
   case LINE_blank:
     return;
 
   case LINE_text:
-    if (l->text == NULL)
-      return;
-
-    if (l->width < 0) {
-      XRectangle rect;
-      XmbTextExtents(osd->fontset, l->text, strlen(l->text), NULL, &rect);
-      l->width = rect.width;
-    }
-
-    switch (osd->align) {
-    case XOSD_center:
-      x = (osd->screen_width - l->width) / 2;
-      break;
-    case XOSD_right:
-      x = osd->screen_width - l->width - x;
-    case XOSD_left:
-      break;
-    }
-
-    osd->extent->y -= osd->outline_offset;
-    if (osd->shadow_offset) {
-      XSetForeground(osd->display, osd->gc, osd->shadow_pixel);
-
-      draw_with_mask(osd, l,
-                     x + osd->shadow_offset,
-                     y, osd->shadow_offset - osd->extent->y,
-                     !(osd->fill_mask & FILL_SHADOW));
-    }
-
-    if (osd->outline_offset) {
-      int draw_line_bitmap = !(osd->fill_mask & FILL_OUTLINE);
-      XSetForeground(osd->display, osd->gc, osd->outline_pixel);
-
-      /* FIXME: echo . | osd_cat -O 50 -p middle -A center */
-      for (i = 1; i <= osd->outline_offset; i++) {
-        draw_with_mask(osd, l, x - i, y, -i - osd->extent->y, draw_line_bitmap);
-        draw_with_mask(osd, l, x    , y, -i - osd->extent->y, draw_line_bitmap);
-        draw_with_mask(osd, l, x + i, y, -i - osd->extent->y, draw_line_bitmap);
-        draw_with_mask(osd, l, x - i, y,     -osd->extent->y, draw_line_bitmap);
-        draw_with_mask(osd, l, x + i, y,     -osd->extent->y, draw_line_bitmap);
-        draw_with_mask(osd, l, x - i, y,  i - osd->extent->y, draw_line_bitmap);
-        draw_with_mask(osd, l, x    , y,  i - osd->extent->y, draw_line_bitmap);
-        draw_with_mask(osd, l, x + i, y,  i - osd->extent->y, draw_line_bitmap);
-      }
-    }
-    osd->extent->y += osd->outline_offset;
-
-    XSetForeground(osd->display, osd->gc, osd->pixel);
-    draw_with_mask(osd, l, x, y, -osd->extent->y,
-                   !(osd->fill_mask & FILL_FACE));
+    draw_text(osd, line);
     break;
 
   case LINE_percentage:
   case LINE_slider:
-    switch (osd->align) {
-    case XOSD_center:
-      x = osd->screen_width * ((1 - SLIDER_SCALE) / 2);
-      break;
-    case XOSD_right:
-      x = osd->screen_width * (1 - SLIDER_SCALE);
-    case XOSD_left:
-      break;
-    }
-
-    draw_bar(osd, osd->mask_bitmap, osd->mask_gc, x, y, l->percentage,
-             l->type == LINE_slider, 0, 1);
-    draw_bar(osd, osd->line_bitmap, osd->gc, x, 0, l->percentage,
-             l->type == LINE_slider, 1, 0);
+    draw_bar(osd, line);
     break;
   }
-  XCopyArea(osd->display, osd->line_bitmap, osd->window, osd->gc, 0, 0,
+  XCopyArea(osd->display, osd->line_bitmap, osd->window, osd->gc, 0, y,
             osd->screen_width, osd->line_height, 0, y);
 }
 
@@ -563,10 +530,10 @@ resize(xosd * osd)
   XFreePixmap(osd->display, osd->line_bitmap);
   osd->line_bitmap =
     XCreatePixmap(osd->display, osd->window, osd->screen_width,
-                  osd->line_height, osd->depth);
+                  osd->height, osd->depth);
 }
 
-static int
+static void
 force_redraw(xosd * osd, int line)
 {                               /* Requires mutex lock. */
   assert(osd);
@@ -578,12 +545,6 @@ force_redraw(xosd * osd, int line)
   XShapeCombineMask(osd->display, osd->window, ShapeBounding, 0, 0,
                     osd->mask_bitmap, ShapeSet);
   XFlush(osd->display);
-
-  /*
-   * if (!osd->mapped) show (osd); 
-   */
-
-  return 0;
 }
 
 static int
