--- src/libxosd/xosd.c.orig	2003-09-25 11:09:24.000000000 +0200
+++ src/libxosd/xosd.c	2003-09-25 13:49:09.000000000 +0200
@@ -51,9 +51,10 @@ Foundation, Inc., 675 Mass Ave, Cambridg
 //#else
 #define XDRAWSTRING XmbDrawString
 //#endif
-#define SLIDER_WIDTH 0.8
+#define SLIDER_SCALE 0.8
+#define SLIDER_SCALE_ON 0.7
 
-	const char* osd_default_font="-misc-fixed-medium-r-semicondensed--*-*-*-*-c-*-*-*";
+const char* osd_default_font="-misc-fixed-medium-r-semicondensed--*-*-*-*-c-*-*-*";
 static const char* osd_default_colour="green";
 
 //const char* osd_default_font="adobe-helvetica-bold-r-*-*-10-*";
@@ -143,24 +144,27 @@ static void update_pos (xosd *osd);
 static void draw_bar(xosd *osd, Drawable d, GC gc, int x, int y,
                      int percent, int is_slider, int set_color)
 {
-	int barw, barh;
-	int nbars, on, i;
-	int so = osd->shadow_offset;
-	int ox;
+	int barw, barh, nbars;
+	int on, i, xx;
+	struct bar { int w, h, y; } bar[2];
+
 	assert (osd);
 
-	barh = -osd->extent->y;
-	barw = barh / 2;
+	/* bar size and dimension */
+	bar[0].h = bar[1].h = barh = -osd->extent->y;
+	bar[0].w = bar[1].w = barw = barh / 2;
+	bar[0].y = bar[1].y = y;
+
+	bar[0].h /= 3;
+	bar[1].w *= SLIDER_SCALE_ON;
+	bar[0].w *= SLIDER_SCALE;
+	bar[0].y += bar[0].h;
 
 	//check how to behave
 	if (osd->bar_length == -1) {
-		nbars = (osd->screen_width * SLIDER_WIDTH) / barw;
-		on    = ((nbars-is_slider) * percent) / 100;
+		nbars = (osd->screen_width * SLIDER_SCALE) / barw;
 	} else {
 		nbars = osd->bar_length;
-    		on    = ((nbars-is_slider) * percent) / 100;
-
-		DEBUG("percent=%d, nbars==%d, on == %d", percent, nbars, on);
 
 		//fix x coord
 		switch (osd->align) {
@@ -176,71 +180,58 @@ static void draw_bar(xosd *osd, Drawable
 				break;
 		}
 	}
-	ox=x;
+	on = ((nbars-is_slider) * percent) / 100;
 
-	for (i = 0; i < nbars; x += barw, i++) {
-		int w = barw, h = barh;
-		int yy = y;
+	DEBUG("percent=%d, nbars=%d, on=%d", percent, nbars, on);
 
-		if (is_slider ? i == on : i < on) {
-			w *= SLIDER_WIDTH-0.1;
-		}
-		else {
-			w *= SLIDER_WIDTH;
-			h /= 3;
-			yy += h;
-		}
-		if (osd->outline_offset)
-		{
-		 if (set_color) XSetForeground (osd->display, gc, osd->outline_pixel);
-		 XFillRectangle(osd->display, d, gc, x-osd->outline_offset, yy-osd->outline_offset, w+(2*osd->outline_offset), h+(2*osd->outline_offset));
-                 if (set_color) XSetForeground (osd->display, gc, osd->pixel);
-		}
-		if (so) {
-			if (set_color) XSetForeground (osd->display, gc, osd->shadow_pixel);
-			XFillRectangle(osd->display, d, gc, x + so, yy + so, w, h);
-			if (set_color) XSetForeground (osd->display, gc, osd->pixel);
+	/* Outline */
+	if (osd->outline_offset) {
+		if (set_color)
+			XSetForeground (osd->display, gc, osd->outline_pixel);
+		for (xx = x, i = 0; i < nbars; xx += barw, i++) {
+			struct bar *b = &(bar[is_slider ? (i == on) : (i < on)]);
+			XFillRectangle(osd->display, d, gc,
+					xx - osd->outline_offset, b->y - osd->outline_offset,
+					b->w + (2*osd->outline_offset), b->h + (2*osd->outline_offset));
 		}
 	}
-	x=ox;
-	for (i = 0; i < nbars; x += barw, i++) {
-		int w = barw, h = barh;
-		int yy = y;
-
-		if (is_slider ? i == on : i < on) {
-			w *= SLIDER_WIDTH-0.1;
-		}
-		else {
-			w *= SLIDER_WIDTH;
-			h /= 3;
-			yy += h;
+	/* Shadow */
+	if (osd->shadow_offset) {
+		if (set_color)
+			XSetForeground (osd->display, gc, osd->shadow_pixel);
+		for (xx = x, i = 0; i < nbars; xx += barw, i++) {
+			struct bar *b = &(bar[is_slider ? (i == on) : (i < on)]);
+			XFillRectangle(osd->display, d, gc,
+					xx + osd->shadow_offset, b->y + osd->shadow_offset, b->w, b->h);
 		}
-		XFillRectangle(osd->display, d, gc, x, yy, w, h);
+	}
+	/* Bar/Slider */
+	if (set_color)
+		XSetForeground (osd->display, gc, osd->pixel);
+	for (xx = x, i = 0; i < nbars; xx += barw, i++) {
+		struct bar *b = &(bar[is_slider ? (i == on) : (i < on)]);
+		XFillRectangle(osd->display, d, gc, xx, b->y, b->w, b->h);
 	}
 }
 
 static void draw_with_mask(xosd* osd, xosd_line* l, int inX, int inPlace, int inY) 
 {
-	   XDRAWSTRING (osd->display,
-					osd->mask_bitmap,
-					osd->fontset,
-					osd->mask_gc,
-					inX,
-					inPlace + inY,
-					l->text,
-					l->length);
-	   
-
-
-		XDRAWSTRING (osd->display,
-					 osd->line_bitmap,
-					 osd->fontset,
-					 osd->gc,
-					 inX,
-					 inY,
-					 l->text,
-					 l->length);				
-
+	XDRAWSTRING (osd->display,
+				 osd->mask_bitmap,
+				 osd->fontset,
+				 osd->mask_gc,
+				 inX,
+				 inPlace + inY,
+				 l->text,
+				 l->length);
+	XDRAWSTRING (osd->display,
+				 osd->line_bitmap,
+				 osd->fontset,
+				 osd->gc,
+				 inX,
+				 inY,
+				 l->text,
+				 l->length);				
 }
 
 static void expose_line(xosd *osd, int line)
@@ -338,10 +329,10 @@ static void expose_line(xosd *osd, int l
 				case XOSD_left:
 					break;
 				case XOSD_center:
-					x=osd->screen_width*((1-SLIDER_WIDTH)/2);
+					x=osd->screen_width*((1-SLIDER_SCALE)/2);
 					break;
 				case XOSD_right:
-					x=osd->screen_width*(1-SLIDER_WIDTH);
+					x=osd->screen_width*(1-SLIDER_SCALE);
 					break;
 				default:
 					break;
@@ -884,16 +875,16 @@ xosd *xosd_create (int number_lines) 
 
 	return osd;
 
-  error3:
+error3:
 	XCloseDisplay (osd->display);
-  error2:
+error2:
 	free (osd->lines);
-  error1:
+error1:
 	pthread_cond_destroy (&osd->cond_time);
 	pthread_cond_destroy (&osd->cond_hide);
 	pthread_mutex_destroy (&osd->mutex);
 	free (osd);
-  error0:
+error0:
 	return NULL;
 }
 
