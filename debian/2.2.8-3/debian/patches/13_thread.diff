#DPATCHLEVEL=0
# Fix multi-thread issue with X11 calls
--- src/libxosd/xosd.c.orig	2004-08-04 13:32:38.000000000 +0200
+++ src/libxosd/xosd.c	2004-08-04 13:32:56.000000000 +0200
@@ -24,7 +24,9 @@
 #include <string.h>
 #include <unistd.h>
 #include <signal.h>
+#include <sys/time.h>
 #include <time.h>
+#include <sys/select.h>
 
 #include <assert.h>
 #include <pthread.h>
@@ -98,12 +100,13 @@ typedef struct
 struct xosd
 {
   pthread_t event_thread;       /* handles X events */
-  pthread_t timeout_thread;     /* handle automatic hide after
-                                 * timeout */
 
-  pthread_mutex_t mutex;        /* mutual exclusion to protect struct */
+  pthread_mutex_t mutex;        /* serialize X11 and structure */
+  pthread_cond_t cond_wait;     /* signal X11 done */
+  int pipefd[2];                /* signal X11 needed */
+
+  pthread_mutex_t mutex_hide;   /* mutual exclusion for show/hide */
   pthread_cond_t cond_hide;     /* signal hide events */
-  pthread_cond_t cond_time;     /* signal timeout */
 
   Display *display;
   int screen;
@@ -150,7 +153,7 @@ struct xosd
   int number_lines;
 
   int timeout;                  /* delta time */
-  struct timespec timeout_time; /* Next absolute timeout */
+  struct timeval timeout_start; /* Absolute start of timeout */
 
   enum { FILL_OUTLINE = 1, FILL_SHADOW = 2, FILL_FACE = 4 } fill_mask;
 };
@@ -161,18 +164,44 @@ char *xosd_error;
 /*
  * Forward declarations of internal functions. 
  */
-static void set_timeout(xosd *);
 static void show(xosd *);
 static void hide(xosd *);
 static void update_pos(xosd * osd);
 
+/*
+ * Serialize access to the X11 connection.
+ *
+ * Background: xosd needs a thread which handles X11 exposures. XWindowEvent()
+ * blocks and would deny any other thread - especially the thread which calls
+ * the xosd API - the usage of the same X11 connection. XInitThreads() can't be
+ * used, because xosd is a library which can be loaded dynamically way after
+ * the loading application has done its firse X11 call, after which calling
+ * XInitThreads() is no longer possible. (Debian-Bug #252170)
+ *
+ * The exposure-thread gets the MUTEX and sleeps on a select([X11,pipe]). When
+ * an X11 event occurs, the tread can directly use X11 calls.
+ * When another thread needs to do an X11 call, it uses _xosd_lock(osd) to
+ * notify the exposure-thread via the pipe, which uses cond_wait to voluntarily
+ * pass the right to access X11 to the signalling thread. The calling thread
+ * acquire the MUTEX and can than use the X11 calls.
+ * After using X11, the thread calls _xosd_unlock(osd) to remove its token from
+ * the pipe and to wake up the exposure-thread via cond_signal, before
+ * releasing the MUTEX.
+ * The number of characters in the pipe is an indication for the number of
+ * threads waiting for the X11-MUTEX.
+ */
 static /*inline*/ void _xosd_lock(xosd *osd) {
+  char c=0;
   FUNCTION_START(Dlocking);
+  write(osd->pipefd[1], &c, sizeof(c));
   pthread_mutex_lock(&osd->mutex);
   FUNCTION_END(Dlocking);
 }
 static /*inline*/ void _xosd_unlock(xosd *osd) {
+  char c;
   FUNCTION_START(Dlocking);
+  read(osd->pipefd[0], &c, sizeof(c));
+  pthread_cond_signal(&osd->cond_wait);
   pthread_mutex_unlock(&osd->mutex);
 }
 
@@ -411,108 +440,107 @@ expose_line(xosd * osd, int line)
   }
 }
 
-/** Handle X11 events
+/** Handle X11 events and timeouts.
  * This is running in it's own thread for Expose-events.
  */
 static void *
 event_loop(void *osdv)
 {
   xosd *osd = osdv;
-  XEvent report;
-  int line, y;
+  int line, y, xfd, max;
 
   FUNCTION_START(Dfunction);
   DEBUG(Dtrace, "event thread started");
   assert(osd);
   usleep(500);
 
+  xfd = ConnectionNumber(osd->display);
+  max = (osd->pipefd[0] > xfd) ? osd->pipefd[0] : xfd;
+
+  pthread_mutex_lock(&osd->mutex);
   while (!osd->done) {
     // DEBUG(Dtrace, "checking window event");
-    XWindowEvent(osd->display, osd->window, ExposureMask, &report);
-    if (osd->done)
-      break;
-
-    report.type &= 0x7f;        /* remove the sent by server/manual send
-                                 * flag */
-
-    switch (report.type) {
-    case Expose:
-      DEBUG(Dtrace, "expose");
-      if (report.xexpose.count == 0) {
-        _xosd_lock(osd);
-        for (line = 0; line < osd->number_lines; line++) {
-          y = osd->line_height * line;
-          if (report.xexpose.y >= y + osd->line_height)
-            continue;
-          if (report.xexpose.y + report.xexpose.height < y)
-            continue;
-          expose_line(osd, line);
+    int retval;
+    fd_set readfds;
+    struct timeval tv, *tvp = NULL;
+
+    FD_ZERO(&readfds);
+    FD_SET(xfd, &readfds);
+    FD_SET(osd->pipefd[0], &readfds);
+
+    if (timerisset(&osd->timeout_start)) {
+      gettimeofday(&tv, NULL);
+      tv.tv_sec -= osd->timeout;
+      if (timercmp(&tv, &osd->timeout_start, <)) {
+        tv.tv_sec = osd->timeout_start.tv_sec - tv.tv_sec;
+        tv.tv_usec = osd->timeout_start.tv_usec - tv.tv_usec;
+        if (tv.tv_usec < 0) {
+          tv.tv_usec += 1000000;
+          tv.tv_sec -= 1;
         }
-        XShapeCombineMask(osd->display, osd->window, ShapeBounding,
-                          0, 0, osd->mask_bitmap, ShapeSet);
-        XFlush(osd->display);
-        _xosd_unlock(osd);
+        tvp = &tv;
       }
-      break;
-
-    case NoExpose:
-      break;
-
-    default:
-      // fprintf (stderr, "%d\n", report.type);
-      break;
     }
-  }
-
-  return NULL;
-}
-
-
-/** Handle timeout events to auto hide output.
- * This is running in it's own thread and waits for timeout notifications.
- */
-static void *
-timeout_loop(void *osdv)
-{
-  xosd *osd = osdv;
-  assert(osd);
-  FUNCTION_START(Dfunction);
-
-  _xosd_lock(osd);
-  while (!osd->done) {
-    /*
-     * Wait for timeout or change of timeout 
-     */
-    int cond;
-
-    if (osd->timeout_time.tv_sec) {
-      DEBUG(Dtrace, "waiting for timeout");
-      cond = pthread_cond_timedwait(&osd->cond_time,
-                                    &osd->mutex, &osd->timeout_time);
-
-      /*
-       * check for timeout. Other condition is variable signaled,
-       * which means new timeout 
-       */
-      if (cond == ETIMEDOUT) {
-        DEBUG(Dtrace, "hiding");
-        osd->timeout_time.tv_sec = 0;
 
-        if (osd->mapped) {
-          hide(osd);
+    /* Wait for the next X11 event or an API request via the pipe. */
+    retval = select(max+1, &readfds, NULL, NULL, tvp);
+    DEBUG(Dvalue, "SELECT=%d PIPE=%d X11=%d", retval, FD_ISSET(osd->pipefd[0], &readfds), FD_ISSET(xfd, &readfds));
+
+    if (retval == -1 && errno == EINTR) {
+      DEBUG(Dselect, "select() EINTR");
+      continue;
+    } else if (retval == -1) {
+      DEBUG(Dselect, "select() error %d", errno);
+      osd->done = 1;
+      break;
+    } else if (retval == 0) {
+      DEBUG(Dselect, "select() timeout");
+      gettimeofday(&tv, NULL);
+      tv.tv_sec -= osd->timeout;
+      if (timerisset(&osd->timeout_start) && timercmp(&tv, &osd->timeout_start, >=)) {
+        timerclear(&osd->timeout_start);
+        hide(osd);
+      }
+      continue; /* timeout */
+    } else if (FD_ISSET(osd->pipefd[0], &readfds)) {
+      /* Another thread wants to use the X11 connection */
+      pthread_cond_wait(&osd->cond_wait, &osd->mutex);
+      DEBUG(Dselect, "Resume exposure thread after X11 call");
+      continue;
+    } else if (FD_ISSET(xfd, &readfds)) {
+      XEvent report;
+      XWindowEvent(osd->display, osd->window, ExposureMask, &report);
+      /* ignore sent by server/manual send flag */
+      switch (report.type & 0x7f) {
+      case Expose:
+        /* http://x.holovko.ru/Xlib/chap10.html#10.9.1 */
+        DEBUG(Dvalue, "expose %d: x=%d y=%d w=%d h=%d", report.xexpose.count, report.xexpose.x, report.xexpose.y, report.xexpose.width, report.xexpose.height);
+        if (report.xexpose.count == 0) {
+          for (line = 0; line < osd->number_lines; line++) {
+            y = osd->line_height * line;
+            if (report.xexpose.y >= y + osd->line_height)
+              continue;
+            if (report.xexpose.y + report.xexpose.height < y)
+              continue;
+            expose_line(osd, line);
+          }
+          XShapeCombineMask(osd->display, osd->window, ShapeBounding,
+                            0, 0, osd->mask_bitmap, ShapeSet);
+          XFlush(osd->display);
         }
+        break;
+      case NoExpose:
+      default:
+        DEBUG(Dvalue, "XEvent=%d", report.type);
+        break;
       }
+      continue;
     } else {
-      /*
-       * once we get the condition variable being signaled, then
-       * it's time for another timeout 
-       */
-      DEBUG(Dtrace, "waiting on condition variable");
-      cond = pthread_cond_wait(&osd->cond_time, &osd->mutex);
-
+      DEBUG(Dselect, "select() FATAL %d", retval);
+      exit(-1); /* Impossible */
     }
   }
-  _xosd_unlock(osd);
+  pthread_mutex_unlock(&osd->mutex);
 
   return NULL;
 }
@@ -846,12 +874,6 @@ xosd_create(int number_lines)
 #endif
 
   FUNCTION_START(Dfunction);
-  DEBUG(Dtrace, "X11 thread support");
-  if (!XInitThreads()) {
-    xosd_error = "xlib is not thread-safe";
-    return NULL;
-  }
-
   DEBUG(Dtrace, "getting display");
   display = getenv("DISPLAY");
   if (!display) {
@@ -867,11 +889,18 @@ xosd_create(int number_lines)
     goto error0;
   }
 
+  DEBUG(Dtrace, "Creating pipe");
+  if (pipe(osd->pipefd) == -1) {
+    xosd_error = "Error creating pipe";
+    goto error0b;
+  }
+
   DEBUG(Dtrace, "initializing mutex");
   pthread_mutex_init(&osd->mutex, NULL);
+  pthread_mutex_init(&osd->mutex_hide, NULL);
   DEBUG(Dtrace, "initializing condition");
+  pthread_cond_init(&osd->cond_wait, NULL);
   pthread_cond_init(&osd->cond_hide, NULL);
-  pthread_cond_init(&osd->cond_time, NULL);
 
   DEBUG(Dtrace, "initializing number lines");
   osd->number_lines = number_lines;
@@ -894,7 +923,7 @@ xosd_create(int number_lines)
   osd->align = XOSD_left;
   osd->voffset = 0;
   osd->timeout = -1;
-  osd->timeout_time.tv_sec = 0;
+  timerclear(&osd->timeout_start);
   osd->fontset = NULL;
 
   DEBUG(Dtrace, "Display query");
@@ -1000,9 +1029,6 @@ xosd_create(int number_lines)
   DEBUG(Dtrace, "initializing event thread");
   pthread_create(&osd->event_thread, NULL, event_loop, osd);
 
-  DEBUG(Dtrace, "initializing timeout thread");
-  pthread_create(&osd->timeout_thread, NULL, timeout_loop, osd);
-
   return osd;
 
 error3:
@@ -1010,9 +1036,13 @@ error3:
 error2:
   free(osd->lines);
 error1:
-  pthread_cond_destroy(&osd->cond_time);
   pthread_cond_destroy(&osd->cond_hide);
+  pthread_cond_destroy(&osd->cond_wait);
+  pthread_mutex_destroy(&osd->mutex_hide);
   pthread_mutex_destroy(&osd->mutex);
+  close(osd->pipefd[0]);
+  close(osd->pipefd[1]);
+error0b:
   free(osd);
 error0:
   return NULL;
@@ -1042,33 +1072,10 @@ xosd_destroy(xosd * osd)
   DEBUG(Dtrace, "waiting for threads to exit");
   _xosd_lock(osd);
   osd->done = 1;
-  /*
-   * Send signal to timeout-thread, will quit. 
-   */
-  pthread_cond_signal(&osd->cond_time);
   _xosd_unlock(osd);
 
-  /*
-   * Send fake XExpose-event to event-thread, will quit. 
-   */
-  DEBUG(Dtrace, "Send fake expose");
-  {
-    XEvent event = {
-      .xexpose = {
-                  .type = Expose,
-                  .send_event = True,
-                  .display = osd->display,
-                  .window = osd->window,
-                  .count = 0,
-                  }
-    };
-    XSendEvent(osd->display, osd->window, False, ExposureMask, &event);
-    XFlush(osd->display);
-  }
-
   DEBUG(Dtrace, "join threads");
   pthread_join(osd->event_thread, NULL);
-  pthread_join(osd->timeout_thread, NULL);
 
   DEBUG(Dtrace, "freeing X resources");
   XFreeGC(osd->display, osd->gc);
@@ -1090,8 +1097,9 @@ xosd_destroy(xosd * osd)
   free(osd->lines);
 
   DEBUG(Dtrace, "destroying condition and mutex");
-  pthread_cond_destroy(&osd->cond_time);
   pthread_cond_destroy(&osd->cond_hide);
+  pthread_cond_destroy(&osd->cond_wait);
+  pthread_mutex_destroy(&osd->mutex_hide);
   pthread_mutex_destroy(&osd->mutex);
 
   DEBUG(Dtrace, "freeing osd structure");
@@ -1191,9 +1199,10 @@ xosd_display(xosd * osd, int line, xosd_
 
   _xosd_lock(osd);
   force_redraw(osd, line);
+  if (osd->timeout > 0)
+    gettimeofday(&osd->timeout_start, NULL);
   if (!osd->mapped)
     show(osd);
-  set_timeout(osd);
   _xosd_unlock(osd);
 
   return len;
@@ -1219,11 +1228,14 @@ xosd_wait_until_no_display(xosd * osd)
   if (osd == NULL)
     return -1;
 
-  _xosd_lock(osd);
-  while (osd->mapped)
-    pthread_cond_wait(&osd->cond_hide, &osd->mutex);
-  _xosd_unlock(osd);
+  pthread_mutex_lock(&osd->mutex_hide);
+  while (osd->mapped) {
+    DEBUG(Dtrace, "waiting %d", osd->mapped);
+    pthread_cond_wait(&osd->cond_hide, &osd->mutex_hide);
+  }
+  pthread_mutex_unlock(&osd->mutex_hide);
 
+  FUNCTION_END(Dfunction);
   return 0;
 }
 /* }}} */
@@ -1482,17 +1494,6 @@ xosd_get_colour(xosd * osd, int *red, in
 }
 /* }}} */
 
-/** Change automatic timeout. **/
-static void
-set_timeout(xosd * osd)
-{                               /* Requires mutex lock. */
-  FUNCTION_START(Dfunction);
-  assert(osd);
-  osd->timeout_time.tv_sec = (osd->timeout > 0)
-    ? osd->timeout_time.tv_sec = time(NULL) + osd->timeout : 0;
-  pthread_cond_signal(&osd->cond_time);
-}
-
 /* xosd_set_timeout -- Change the time before display is hidden. {{{ */
 int
 xosd_set_timeout(xosd * osd, int timeout)
@@ -1500,10 +1501,7 @@ xosd_set_timeout(xosd * osd, int timeout
   FUNCTION_START(Dfunction);
   if (osd == NULL)
     return -1;
-  _xosd_lock(osd);
   osd->timeout = timeout;
-  set_timeout(osd);
-  _xosd_unlock(osd);
   return 0;
 }
 /* }}} */
@@ -1514,10 +1512,13 @@ hide(xosd * osd)
 {                               /* Requires mutex lock. */
   FUNCTION_START(Dfunction);
   assert(osd);
-  osd->mapped = 0;
   XUnmapWindow(osd->display, osd->window);
   XFlush(osd->display);
+  pthread_mutex_lock(&osd->mutex_hide);
+  osd->mapped = 0;
   pthread_cond_broadcast(&osd->cond_hide);
+  pthread_mutex_unlock(&osd->mutex_hide);
+  FUNCTION_END(Dfunction);
 }
 
 /* xosd_hide -- hide the display {{{ */
@@ -1546,6 +1547,7 @@ show(xosd * osd)
   osd->mapped = 1;
   XMapRaised(osd->display, osd->window);
   XFlush(osd->display);
+  FUNCTION_END(Dfunction);
 }
 
 /* xosd_show -- Show the display after being hidden {{{ */
