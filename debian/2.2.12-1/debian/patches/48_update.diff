#DPATCHLEVEL=0
# Rework synchronous updates, since fast updates can get lost.
# On each map() and unmap(), increase the generation counter.
# xosd_display() and xosd_show() block until things are shown.
# This is done by waiting for one of the next generations.
--- src/libxosd/intern.h.orig	2004-11-03 12:39:21.000000000 +0100
+++ src/libxosd/intern.h	2004-11-03 13:11:02.000000000 +0100
@@ -121,7 +121,7 @@ struct xosd
   unsigned long outline_pixel;  /* CACHE (outline_colour) */
   int bar_length;               /* CONF */
 
-  int mapped;                   /* DYN */
+  int generation;               /* DYN count of map/unmap */
   int done;                     /* DYN */
   enum {
     UPD_none = 0,       /* Nothing changed */
--- src/libxosd/xosd.c.orig	2004-11-03 12:43:02.000000000 +0100
+++ src/libxosd/xosd.c	2004-11-03 13:16:36.000000000 +0100
@@ -33,6 +33,20 @@ const char *osd_default_colour = "green"
 /** Global error string. */
 char *xosd_error;
 
+/* Wait until display is in next state. {{{ */
+static void
+_wait_until_update(xosd * osd, int generation)
+{
+  pthread_mutex_lock(&osd->mutex_sync);
+  while (osd->generation == generation) {
+    DEBUG(Dtrace, "waiting %d %d", generation, osd->generation);
+    pthread_cond_wait(&osd->cond_sync, &osd->mutex_sync);
+  }
+  pthread_mutex_unlock(&osd->mutex_sync);
+}
+
+/* }}} */
+
 /* Serialize access to the X11 connection. {{{
  *
  * Background: xosd needs a thread which handles X11 exposures. XWindowEvent()
@@ -67,10 +81,13 @@ static /*inline */ void
 _xosd_unlock(xosd * osd)
 {
   char c;
+  int generation = osd->generation, update = osd->update;
   FUNCTION_START(Dlocking);
   read(osd->pipefd[0], &c, sizeof(c));
   pthread_cond_signal(&osd->cond_wait);
   pthread_mutex_unlock(&osd->mutex);
+  if (update & UPD_show)
+    _wait_until_update(osd, generation & ~1); /* no wait when already shown. */
   FUNCTION_END(Dlocking);
 }
 
@@ -266,9 +283,9 @@ event_loop(void *osdv)
     /* Hide display requested. */
     if (osd->update & UPD_hide) {
       DEBUG(Dupdate, "UPD_hide");
-      if (osd->mapped) {
+      if (osd->generation & 1) {
         XUnmapWindow(osd->display, osd->window);
-        osd->mapped = 0;
+        osd->generation++;
       }
     }
     /* The font, outline or shadow was changed. Recalculate line height,
@@ -357,13 +374,13 @@ event_loop(void *osdv)
     /* Show display requested. */
     if (osd->update & UPD_show) {
       DEBUG(Dupdate, "UPD_show");
-      if (!osd->mapped) {
-        osd->mapped = 1;
+      if (~osd->generation & 1) {
+        osd->generation++;
         XMapRaised(osd->display, osd->window);
       }
     }
     /* Copy content, if window was changed or exposed. */
-    if (osd->mapped
+    if ((osd->generation & 1)
         && osd->update & (UPD_size | UPD_pos | UPD_lines | UPD_show)) {
       DEBUG(Dupdate, "UPD_copy");
       XCopyArea(osd->display, osd->line_bitmap, osd->window, osd->gc, 0, 0,
@@ -393,7 +410,7 @@ event_loop(void *osdv)
           tv.tv_sec -= 1;
         }
         tvp = &tv;
-      } else if (osd->mapped) {
+      } else if (osd->generation & 1) {
         timerclear(&osd->timeout_start);
         osd->update |= UPD_hide;
         continue;               /* Hide the window first and than restart the loop */
@@ -470,20 +487,6 @@ event_loop(void *osdv)
 
 /* }}} */
 
-/* Wait until display is update and in specific state. {{{ */
-static void
-_wait_until_state(xosd * osd, int state)
-{
-  pthread_mutex_lock(&osd->mutex_sync);
-  while (osd->mapped != state) {
-    DEBUG(Dtrace, "waiting %d", osd->mapped);
-    pthread_cond_wait(&osd->cond_sync, &osd->mutex_sync);
-  }
-  pthread_mutex_unlock(&osd->mutex_sync);
-}
-
-/* }}} */
-
 /* Parse textual colour value. {{{ */
 static int
 parse_colour(xosd * osd, XColor * col, unsigned long *pixel,
@@ -680,7 +683,7 @@ xosd_create(int number_lines)
     memset(&osd->lines[i], 0, sizeof(union xosd_line));
 
   DEBUG(Dtrace, "misc osd variable initialization");
-  osd->mapped = 0;
+  osd->generation = 0;
   osd->done = 0;
   osd->pos = XOSD_top;
   osd->hoffset = 0;
@@ -967,7 +970,6 @@ union xosd_line newline = { type:LINE_bl
   osd->lines[line] = newline;
   osd->update |= UPD_content | UPD_timer | UPD_show;
   _xosd_unlock(osd);
-  _wait_until_state(osd, 1);
 
 error:
   va_end(a);
@@ -983,7 +985,7 @@ xosd_is_onscreen(xosd * osd)
   FUNCTION_START(Dfunction);
   if (osd == NULL)
     return -1;
-  return osd->mapped;
+  return osd->generation & 1;
 }
 
 /* }}} */
@@ -992,11 +994,13 @@ xosd_is_onscreen(xosd * osd)
 int
 xosd_wait_until_no_display(xosd * osd)
 {
+  int generation;
   FUNCTION_START(Dfunction);
   if (osd == NULL)
     return -1;
 
-  _wait_until_state(osd, 0);
+  if ((generation = osd->generation) & 1)
+    _wait_until_update(osd, generation);
 
   FUNCTION_END(Dfunction);
   return 0;
@@ -1257,9 +1261,10 @@ xosd_hide(xosd * osd)
   if (osd == NULL)
     return -1;
 
-  if (osd->mapped) {
+  if (osd->generation & 1) {
     _xosd_lock(osd);
-    osd->update |= (osd->update & ~UPD_show) | UPD_hide;
+    osd->update &= ~UPD_show;
+    osd->update |= UPD_hide;
     _xosd_unlock(osd);
     return 0;
   }
@@ -1276,12 +1281,11 @@ xosd_show(xosd * osd)
   if (osd == NULL)
     return -1;
 
-  if (!osd->mapped) {
+  if (~osd->generation & 1) {
     _xosd_lock(osd);
-    osd->update |= (osd->update & ~UPD_hide) | UPD_show | UPD_timer;
+    osd->update &= ~UPD_hide;
+    osd->update |= UPD_show | UPD_timer;
     _xosd_unlock(osd);
-
-    _wait_until_state(osd, 1);
     return 0;
   }
   return -1;
